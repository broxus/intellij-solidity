buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io'}
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.grammarkit" version "2021.1.3"
    // Avoid 1.5.3 due to issues with hot reloading, see https://github.com/JetBrains/gradle-intellij-plugin/issues/959
    id "org.jetbrains.intellij" version "1.13.2"
    id 'net.researchgate.release' version '2.8.1'
}


apply plugin: 'java'
apply plugin: 'org.jetbrains.grammarkit'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'idea'
apply plugin: 'jacoco'

sourceCompatibility = 11
targetCompatibility = 11
compileKotlin {
    kotlinOptions.jvmTarget = 11
}
compileTestKotlin {
    kotlinOptions.jvmTarget = 11
}

idea {
    module {
        generatedSourceDirs += file('gen')
    }
}

sourceSets {
    main {
        java.srcDirs += 'gen'
    }
}

clean.doFirst {
    delete 'gen'
}

intellij {
    pluginName = 'IntelliJ-T-Sol'

    version = '2021.1.3'
    downloadSources = true
    updateSinceUntilBuild = false
    // TODO(sergey): remove
    plugins = [
        'java',
    ]

    sandboxDir = project.rootDir.canonicalPath + "/.sandbox"
}

runIde {
    maxHeapSize = "1G"
}

repositories {
    mavenCentral()
    // ethereumj isn't available on maven central
    jcenter()
    maven { url "https://www.jetbrains.com/intellij-repository/releases" }
    maven { url "https://cache-redirector.jetbrains.com/intellij-dependencies" }
}

configurations {
    lexer
    parser
    runtime.exclude group: "org.slf4j"  // IntelliJ uses slf4j which results in a class loader conflict
    implementation.exclude group: "org.slf4j"  // IntelliJ uses slf4j which results in a class loader conflict
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation("io.sentry:sentry:$sentry_version")

    testImplementation group: 'junit', name: 'junit', version: '4.11'
}

release {
    newVersionCommitMessage = '[Intellij-Solidity Release] - '
    preTagCommitMessage = '[Intellij-Solidity Release] - pre tag commit: '
    buildTasks = ['buildPlugin']
}


task codegen(dependsOn: ['lexer', 'parser']) {}
tasks.compileKotlin.dependsOn codegen

task lexer(type: org.jetbrains.grammarkit.tasks.GenerateLexer) {
    def lexerName = "_SolidityLexer"
    source = "$project.projectDir/src/main/grammars/${lexerName}.flex"
    targetDir = "gen/com/broxus/solidity"
    targetClass = "$lexerName"
    skeleton = 'src/main/grammars/idea-flex.skeleton'
    purgeOldFiles = true
}

task parser(type: org.jetbrains.grammarkit.tasks.GenerateParser) {
    dependsOn lexer

    def pkg = 'com/broxus/solidity'
    source = "$project.projectDir/src/main/grammars/solidity.bnf"
    targetRoot = 'gen'
    pathToParser = "$pkg/SolidityParser.java"
    pathToPsiRoot = "$pkg/psi"
    purgeOldFiles = true

    outputs.dir(new File("$targetRoot/$pkg"))
}


// codecov

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport

publishPlugin {
    token = System.getenv("PUBLISH_TOKEN")
}

